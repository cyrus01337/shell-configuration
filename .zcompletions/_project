#compdef project
#!/usr/bin/env bash
setopt DOT_GLOB
setopt EXTENDED_GLOB

_get_project_directories() {
    local -a directories=()

    # for directory in $(eval echo $PROJECTS_PATTERN/); do
    #     directories+=($(basename $directory))
    # done

    for pattern in $PROJECTS_EXTRAS_PATTERNS; do
        for extra_directory in $pattern; do
            directories+=($(basename $extra_directory))
        done
    done

    echo $directories
}

_is_sub_command() {
    local command_="$1"

    for sub_command in $SUB_COMMANDS; do
        if [[ "$command_" = "$sub_command" ]]; then
            echo true

            break
        fi
    done
}

_project() {
    local -a SUB_COMMANDS=("complete" "path" "run")
    local -a project_directories=($(_get_project_directories))
    # local -a projects_without_sub_directories=($(_get_projects_without_sub_directories))
    # local -a projects_with_sub_directories=($(_get_projects_with_sub_directories))
    local initial_argument="${words[2]}"

    if [[ ! "$project_directories" ]]; then
        return 0
    fi

    # local -a numbers=(1 2 3 4 5 6 7 8 9 10)
    # _describe -t numbers "numbers" numbers
    if [[ ! "$initial_argument" ]] || [[ $(_is_sub_command "$initial_argument") ]]; then
        _arguments "1:sub-commands:->sub-commands" "2:projects:->projects"
    elif [[ ! $(_is_sub_command "$initial_argument") ]]; then
        _arguments "1:projects:->projects"
    fi

    case "$state" in
        sub-commands)
            _describe -t "sub-commands" "sub-commands" SUB_COMMANDS

            ;&
        projects)
            _describe -t "projects" "projects" project_directories
            # _describe -t "projects-without-sub-directories" "projects" projects_without_sub_directories
            # _describe -t "projects-with-sub-directories" "projects (with sub-directories)" projects_with_sub_directories

            ;;
    esac
}

# if [[ "$funcstack[1]" = "_project" ]]; then
_project "$@"
# fi

